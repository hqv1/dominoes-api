# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    # branches: [ main ]
    branches:
      - '**'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env: 
      SHA8: ${GITHUB_SHA::8}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME  }}
          password: ${{ secrets.DOCKER_HUB_TOKEN  }}

      #- name: Build and push container image
      #  run: docker buildx build --push --platform linux/arm64/v8,linux/amd64 -t hqv1/dominoes-api:$(echo $GITHUB_SHA | head -c7) ./WebApplication

      - name: Get Short SHA
        id: vars
        run: |
         echo ::set-output name=sha_short::$(git rev-parse --short=7 ${{ github.sha }})

      # - name: use env
      #   run: |
      #     echo $SHORT_SHA_TEST
      #   env:
      #     SHORT_SHA_TEST: ${{ steps.vars.outputs.sha_short }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./WebApplication
          platforms: linux/amd64,linux/arm64
          push: true
          tags: hqv1/dominoes-api:${{ steps.vars.outputs.sha_short }}
        env:
          SHORT_SHA: ${{ steps.vars.outputs.sha_short }}

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}


      # # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - name: Checkout branch
      #   uses: actions/checkout@v2

      # # Install doctl.
      # - name: Install doctl
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      # # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      # - name: Build container image
      #   run: docker build -t registry.digitalocean.com/dominoes/dominoes-api:$(echo $GITHUB_SHA | head -c7) ./WebApplication

      # - name: Log in to DigitalOcean Container Registry with short-lived credentials
      #   run: doctl registry login --expiry-seconds 1200

      # - name: Push image to DigitalOcean Container Registry
      #   run: docker push registry.digitalocean.com/dominoes/dominoes-api:$(echo $GITHUB_SHA | head -c7)

      # # Deploy to DigitalOcean Kubernetes.
      # - name: Update deployment file
      #   run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/dominoes/dominoes-api:'${TAG}'|' $GITHUB_WORKSPACE/WebApplication/config/deployment.yml

      # - name: Save DigitalOcean kubeconfig with short-lived credentials
      #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-dominoes-dev
        
      # - name: Deploy to DigitalOcean Kubernetes
      #   run: kubectl apply -f $GITHUB_WORKSPACE/WebApplication/config/deployment.yml

      # - name: Verify deployment
      #   run: kubectl rollout status deployment/dominoes-api
